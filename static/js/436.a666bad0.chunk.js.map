{"version":3,"file":"static/js/436.a666bad0.chunk.js","mappings":"qNAEO,MAAMA,EAAYC,EAAAA,GAAOC,IAAGC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,wHAyCtBC,GAlCSJ,EAAAA,GAAOK,OAAMC,IAAAA,GAAAH,EAAAA,EAAAA,GAAA,2KASfH,EAAAA,GAAOC,IAAGM,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,yEAMXH,EAAAA,GAAOQ,IAAGC,IAAAA,GAAAN,EAAAA,EAAAA,GAAA,kEAMNH,EAAAA,GAAOC,IAAGS,IAAAA,GAAAP,EAAAA,EAAAA,GAAA,iMAaVH,EAAAA,GAAOC,IAAGU,IAAAA,GAAAR,EAAAA,EAAAA,GAAA,8CAgDpBS,GA3CUZ,EAAAA,GAAOC,IAAGY,IAAAA,GAAAV,EAAAA,EAAAA,GAAA,gNAYLH,EAAAA,GAAOc,GAAEC,IAAAA,GAAAZ,EAAAA,EAAAA,GAAA,2JASVH,EAAAA,GAAOgB,GAAEC,IAAAA,GAAAd,EAAAA,EAAAA,GAAA,4DAMTH,EAAAA,GAAOkB,GAAEC,IAAAA,GAAAhB,EAAAA,EAAAA,GAAA,+QAExBiB,GAAWA,EAAMC,YAAc,UAAY,SACrCD,GAAWA,EAAMC,YAAc,OAAS,WAInCD,GAAWA,EAAMC,YAAc,UAAY,gBAS9CrB,EAAAA,GAAOsB,KAAIC,IAAAA,GAAApB,EAAAA,EAAAA,GAAA,8CAKlBqB,EAAQxB,EAAAA,GAAOyB,GAAEC,IAAAA,GAAAvB,EAAAA,EAAAA,GAAA,qDAKjBwB,EAAY3B,EAAAA,GAAO4B,KAAIC,IAAAA,GAAA1B,EAAAA,EAAAA,GAAA,mDAKvB2B,EAAO9B,EAAAA,GAAO+B,KAAIC,IAAAA,GAAA7B,EAAAA,EAAAA,GAAA,qEAMlB8B,EAAQjC,EAAAA,GAAOkC,MAAKC,IAAAA,GAAAhC,EAAAA,EAAAA,GAAA,8CAKpBiC,EAAQpC,EAAAA,GAAOqC,MAAKC,IAAAA,GAAAnC,EAAAA,EAAAA,GAAA,mJASpBoC,EAAWvC,EAAAA,GAAOwC,SAAQC,IAAAA,GAAAtC,EAAAA,EAAAA,GAAA,sLAW1BuC,EAAS1C,EAAAA,GAAO2C,OAAMC,IAAAA,GAAAzC,EAAAA,EAAAA,GAAA,uKAUtB0C,EAAe7C,EAAAA,GAAO8C,OAAMC,IAAAA,GAAA5C,EAAAA,EAAAA,GAAA,4QAgB5B6C,EAAehD,EAAAA,GAAOiD,EAACC,IAAAA,GAAA/C,EAAAA,EAAAA,GAAA,uEAMvBgD,EAAiBnD,EAAAA,GAAOiD,EAACG,IAAAA,GAAAjD,EAAAA,EAAAA,GAAA,yEAOAH,EAAAA,GAAOC,IAAGoD,IAAAA,GAAAlD,EAAAA,EAAAA,GAAA,+L,uBCNhD,QArKA,WACE,MAAM,QAAEmD,IAAYC,EAAAA,EAAAA,MACbC,EAAUC,IAAeC,EAAAA,EAAAA,UAAS,oCAClCC,EAAOC,IAAYF,EAAAA,EAAAA,UAAS,KAC5BG,EAAMC,IAAWJ,EAAAA,EAAAA,UAAS,6BAC1BK,EAAaC,IAAkBN,EAAAA,EAAAA,UAAS,KACxCO,EAAOC,IAAYR,EAAAA,EAAAA,UAAS,KAC5BS,EAAWC,IAAgBV,EAAAA,EAAAA,UAAS,KACpCW,EAASC,IAAcZ,EAAAA,EAAAA,UAAS,KAChCa,EAAaC,IAAkBd,EAAAA,EAAAA,UAAS,KACxCe,EAAOC,IAAYhB,EAAAA,EAAAA,UAAS,KAC5BiB,EAASC,IAAclB,EAAAA,EAAAA,UAAS,IAEjCmB,EAAO,8CAAAC,OAAiDxB,GA2E9D,OA1EAyB,EAAAA,EAAAA,YAAU,KACcC,WACpB,IACE,MAAMC,QAAiBC,EAAAA,EAAMC,IAAI,uCAADL,OACSxB,GACvC,CACE8B,QAAS,CAAE,eAAgB,sBAG/B3B,EAAYwB,EAASI,KAAKC,WAAa,kCACzC,CAAE,MAAOC,GACPC,QAAQf,MAAM,sEAAqBc,GACnC9B,EAAY,kCACd,GAGFgC,EAAe,GACd,CAACnC,KA0DFoC,EAAAA,EAAAA,KAACC,EAAW,CAAAC,UACVF,EAAAA,EAAAA,KAACC,EAAS,CAAAC,UACRC,EAAAA,EAAAA,MAACF,EAAM,CAAAC,SAAA,EACLC,EAAAA,EAAAA,MAACF,EAAO,CAAAC,SAAA,EACNF,EAAAA,EAAAA,KAACC,EAAW,CAAAC,SAAEpC,IAAuB,kCAEvCqC,EAAAA,EAAAA,MAACF,EAAM,CAACG,SA/DKd,UACnBe,EAAEC,iBAEF,MAAMC,EACK,6BAATpC,GAAkB,IAAIqC,MAAOC,cAAcC,MAAM,KAAK,GAAKjC,EACvDkC,EAA8B,6BAATxC,EAAkB,aAAeQ,EAE5D,IACGV,IACAY,IACCJ,GAAsB,6BAATN,IACbQ,GAAoB,6BAATR,EAKb,YAHAa,EACE,uMAKJ,MAAM4B,EAAc,CAClBC,kBAAmB5C,EACnB6C,iBAAkB3C,EAClB4C,yBAA0B1C,GAAe,KACzC2C,kBAAmBzC,GAAS,KAC5B0C,uBAAwBV,EACxBW,qBAAsBP,EACtBQ,wBAAyBtC,GAG3B,IACEiB,QAAQsB,IAAI,sDAAoBR,GAMR,aAJDpB,EAAAA,EAAM6B,KAAKlC,EAASyB,EAAa,CACtDlB,QAAS,CAAE,eAAgB,uBAGhB4B,SACXpC,EAAW,6GACXhB,EAAS,IACTE,EAAQ,4BACRE,EAAe,IACfE,EAAS,IACTE,EAAa,IACbE,EAAW,IACXE,EAAe,IACfE,EAAS,IAEb,CAAE,MAAOa,GACPC,QAAQf,MACN,0CACAc,EAAIN,SAAWM,EAAIN,SAASI,KAAOE,GAErCb,EAAS,2HACX,GAUqCkB,SAAA,CAC5BnB,IAASiB,EAAAA,EAAAA,KAACC,EAAc,CAAAC,SAAEnB,IAC1BE,IAAWe,EAAAA,EAAAA,KAACC,EAAgB,CAAAC,SAAEjB,KAE/Be,EAAAA,EAAAA,KAACC,EAAO,CAAAC,SAAC,kBACTF,EAAAA,EAAAA,KAACC,EAAO,CACN9B,KAAK,OACLoD,YAAY,+CACZC,MAAOvD,EACPwD,SAAWpB,GAAMnC,EAASmC,EAAEqB,OAAOF,OACnCG,UAAQ,KAGV3B,EAAAA,EAAAA,KAACC,EAAO,CAAAC,SAAC,+BACTC,EAAAA,EAAAA,MAACF,EAAQ,CAACuB,MAAOrD,EAAMsD,SAAWpB,GAAMjC,EAAQiC,EAAEqB,OAAOF,OAAOtB,SAAA,EAC9DF,EAAAA,EAAAA,KAAA,UAAQwB,MAAM,2BAAMtB,SAAC,8BACrBF,EAAAA,EAAAA,KAAA,UAAQwB,MAAM,2BAAMtB,SAAC,iCAGvBF,EAAAA,EAAAA,KAACC,EAAO,CAAAC,SAAC,oDACTF,EAAAA,EAAAA,KAACC,EAAO,CACN9B,KAAK,OACLoD,YAAY,gBACZC,MAAOnD,EACPoD,SAAWpB,GAAM/B,EAAe+B,EAAEqB,OAAOF,UAG3CxB,EAAAA,EAAAA,KAACC,EAAO,CAAAC,SAAC,oDACTF,EAAAA,EAAAA,KAACC,EAAO,CACN9B,KAAK,QACLoD,YAAY,qBACZC,MAAOjD,EACPkD,SAAWpB,GAAM7B,EAAS6B,EAAEqB,OAAOF,SAG3B,6BAATrD,IACCgC,EAAAA,EAAAA,MAAAyB,EAAAA,SAAA,CAAA1B,SAAA,EACEF,EAAAA,EAAAA,KAACC,EAAO,CAAAC,SAAC,qCACTF,EAAAA,EAAAA,KAACC,EAAO,CACN9B,KAAK,OACLqD,MAAO/C,EACPgD,SAAWpB,GAAM3B,EAAa2B,EAAEqB,OAAOF,OACvCG,SAAmB,6BAATxD,KAGZ6B,EAAAA,EAAAA,KAACC,EAAO,CAAAC,SAAC,qCACTF,EAAAA,EAAAA,KAACC,EAAO,CACN9B,KAAK,OACLqD,MAAO7C,EACP8C,SAAWpB,GAAMzB,EAAWyB,EAAEqB,OAAOF,OACrCG,SAAmB,6BAATxD,QAKhB6B,EAAAA,EAAAA,KAACC,EAAO,CAAAC,SAAC,+BACTF,EAAAA,EAAAA,KAACC,EAAU,CACTsB,YAAY,mMACZC,MAAO3C,EACP4C,SAAWpB,GAAMvB,EAAeuB,EAAEqB,OAAOF,OACzCG,UAAQ,KAEV3B,EAAAA,EAAAA,KAACC,EAAc,CAAC9B,KAAK,SAAQ+B,SAAC,0BAM1C,C","sources":["components/RecruitmentPage/RecruitmentPage.styles.jsx","components/RecruitmentPage/RecruitmentPage.jsx"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  font-family: Arial, sans-serif;\n  background-color: #f9f9f9;\n`;\n\nexport const Header = styled.header`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 1rem 2rem;\n  background-color: #fff;\n  border-bottom: 1px solid #ddd;\n`;\n\nexport const Logo = styled.div`\n  font-size: 1.5rem;\n  font-weight: bold;\n  color: #0056b3;\n`;\n\nexport const Nav = styled.nav`\n  display: flex;\n  gap: 2rem;\n  align-items: center;\n`;\n\nexport const NavItem = styled.div`\n  color: #000;\n  font-size: 1rem;\n  font-weight: bold;\n  cursor: pointer;\n  padding: 0.5rem 1rem;\n  transition: color 0.3s ease-in-out;\n\n  &:hover {\n    color: #0056b3;\n  }\n`;\n\nexport const Content = styled.div`\n  display: flex;\n  margin: 2rem;\n`;\n\nexport const Sidebar = styled.div`\n  width: 240px;\n  padding: 1.5rem;\n  background-color: #ffffff;\n  border-radius: 12px;\n  box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n`;\n\n// ✅ 카테고리 제목 강조\nexport const SidebarTitle = styled.h3`\n  font-size: 1.2rem;\n  font-weight: bold;\n  color: #333;\n  margin-bottom: 1rem;\n  padding-bottom: 0.5rem;\n  border-bottom: 2px solid #ddd;\n`;\n\nexport const SidebarList = styled.ul`\n  list-style: none;\n  padding: 0;\n  margin: 0;\n`;\n\nexport const SidebarItem = styled.li`\n  font-size: 1rem;\n  color: ${(props) => (props.$isSelected ? \"#0056b3\" : \"#333\")};\n  font-weight: ${(props) => (props.$isSelected ? \"bold\" : \"normal\")};\n  cursor: pointer;\n  padding: 0.75rem 1rem;\n  border-radius: 6px;\n  background-color: ${(props) => (props.$isSelected ? \"#e6f7ff\" : \"transparent\")};\n  transition: all 0.3s ease-in-out;\n\n  &:hover {\n    background-color: #f0f4ff;\n    color: #0056b3;\n  }\n`;\n\nexport const Main = styled.main`\n  flex: 1;\n  padding-left: 2rem;\n`;\n\nexport const Title = styled.h2`\n  color: #0056b3;\n  margin-bottom: 2rem;\n`;\n\nexport const Highlight = styled.span`\n  color: #ff3366;\n  font-weight: bold;\n`;\n\nexport const Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n`;\n\nexport const Label = styled.label`\n  font-size: 1rem;\n  color: #333;\n`;\n\nexport const Input = styled.input`\n  width: 100%;\n  padding: 0.75rem;\n  font-size: 1rem;\n  border: 1px solid #ddd;\n  border-radius: 6px;\n  background-color: #f9f9f9;\n`;\n\nexport const TextArea = styled.textarea`\n  width: 100%;\n  padding: 0.75rem;\n  font-size: 1rem;\n  border: 1px solid #ddd;\n  border-radius: 6px;\n  background-color: #f9f9f9;\n  resize: none;\n  height: 150px;\n`;\n\nexport const Select = styled.select`\n  width: 100%;\n  padding: 0.75rem;\n  font-size: 1rem;\n  border: 1px solid #ddd;\n  border-radius: 6px;\n  background-color: #f9f9f9;\n  cursor: pointer;\n`;\n\nexport const SubmitButton = styled.button`\n  padding: 0.75rem;\n  font-size: 1rem;\n  background-color: #0056b3;\n  color: white;\n  border: none;\n  border-radius: 6px;\n  cursor: pointer;\n  margin-top: 1rem;\n  transition: all 0.3s ease-in-out;\n\n  &:hover {\n    background-color: #003f7f;\n  }\n`;\n\nexport const ErrorMessage = styled.p`\n  color: red;\n  font-size: 0.9rem;\n  margin-bottom: 1rem;\n`;\n\nexport const SuccessMessage = styled.p`\n  color: green;\n  font-size: 0.9rem;\n  margin-bottom: 1rem;\n`;\n\n// 모집 내용의 줄바꿈(엔터) 적용을 위한 스타일 컴포넌트\nexport const RecruitmentDescription = styled.div`\n  white-space: pre-line;\n  font-size: 1rem;\n  line-height: 1.5;\n  color: #333;\n  border: 1px solid #ddd;\n  padding: 0.75rem;\n  border-radius: 4px;\n  background-color: #fff;\n`;\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport * as S from \"./RecruitmentPage.styles\";\nimport { useParams } from \"react-router-dom\";\n\nfunction RecruitmentPage() {\n  const { club_id } = useParams();\n  const [clubName, setClubName] = useState(\"동아리 이름\");\n  const [title, setTitle] = useState(\"\");\n  const [type, setType] = useState(\"상시모집\");\n  const [phoneNumber, setPhoneNumber] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [startDate, setStartDate] = useState(\"\");\n  const [endDate, setEndDate] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [success, setSuccess] = useState(\"\");\n\n  const API_URL = `http://43.203.79.210:5001/api/recruitments/${club_id}`;\n  useEffect(() => {\n    const fetchClubName = async () => {\n      try {\n        const response = await axios.get(\n          `http://43.203.79.210:5001/api/clubs/${club_id}`,\n          {\n            headers: { \"Content-Type\": \"application/json\" },\n          }\n        );\n        setClubName(response.data.club_name || \"동아리 이름\");\n      } catch (err) {\n        console.error(\"❌ [동아리 이름 조회 실패]:\", err);\n        setClubName(\"동아리 이름\");\n      }\n    };\n\n    fetchClubName();\n  }, [club_id]); // ✅ club_id만 의존성 배열에 포함\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    const recruitmentStartDate =\n      type === \"상시모집\" ? new Date().toISOString().split(\"T\")[0] : startDate;\n    const recruitmentEndDate = type === \"상시모집\" ? \"2099-12-31\" : endDate;\n\n    if (\n      !title ||\n      !description ||\n      (!startDate && type === \"수시모집\") ||\n      (!endDate && type === \"수시모집\")\n    ) {\n      setError(\n        \"제목, 모집 내용, 시작일(수시모집), 종료일(수시모집)은 필수 입력 사항입니다.\"\n      );\n      return;\n    }\n\n    const requestData = {\n      recruitment_title: title,\n      recruitment_type: type,\n      recruitment_phone_number: phoneNumber || null,\n      recruitment_email: email || null,\n      recruitment_start_date: recruitmentStartDate,\n      recruitment_end_date: recruitmentEndDate,\n      recruitment_description: description,\n    };\n\n    try {\n      console.log(\"🔹 [API 요청 데이터]:\", requestData);\n\n      const response = await axios.post(API_URL, requestData, {\n        headers: { \"Content-Type\": \"application/json\" },\n      });\n\n      if (response.status === 201) {\n        setSuccess(\"모집공고가 성공적으로 등록되었습니다.\");\n        setTitle(\"\");\n        setType(\"상시모집\");\n        setPhoneNumber(\"\");\n        setEmail(\"\");\n        setStartDate(\"\");\n        setEndDate(\"\");\n        setDescription(\"\");\n        setError(\"\");\n      }\n    } catch (err) {\n      console.error(\n        \"❌ [API 요청 실패]:\",\n        err.response ? err.response.data : err\n      );\n      setError(\"서버 오류가 발생했습니다. 다시 시도해주세요.\");\n    }\n  };\n\n  return (\n    <S.Container>\n      <S.Content>\n        <S.Main>\n          <S.Title>\n            <S.Highlight>{clubName}</S.Highlight> - 모집공고\n          </S.Title>\n          <S.Form onSubmit={handleSubmit}>\n            {error && <S.ErrorMessage>{error}</S.ErrorMessage>}\n            {success && <S.SuccessMessage>{success}</S.SuccessMessage>}\n\n            <S.Label>제목</S.Label>\n            <S.Input\n              type=\"text\"\n              placeholder=\"2025-1 신입부원 모집\"\n              value={title}\n              onChange={(e) => setTitle(e.target.value)}\n              required\n            />\n\n            <S.Label>모집 유형</S.Label>\n            <S.Select value={type} onChange={(e) => setType(e.target.value)}>\n              <option value=\"상시모집\">상시모집</option>\n              <option value=\"수시모집\">수시모집</option>\n            </S.Select>\n\n            <S.Label>연락처 (선택 입력)</S.Label>\n            <S.Input\n              type=\"text\"\n              placeholder=\"010-0000-0000\"\n              value={phoneNumber}\n              onChange={(e) => setPhoneNumber(e.target.value)}\n            />\n\n            <S.Label>이메일 (선택 입력)</S.Label>\n            <S.Input\n              type=\"email\"\n              placeholder=\"example@ajou.ac.kr\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n            />\n\n            {type === \"수시모집\" && (\n              <>\n                <S.Label>모집 시작일</S.Label>\n                <S.Input\n                  type=\"date\"\n                  value={startDate}\n                  onChange={(e) => setStartDate(e.target.value)}\n                  required={type === \"수시모집\"}\n                />\n\n                <S.Label>모집 종료일</S.Label>\n                <S.Input\n                  type=\"date\"\n                  value={endDate}\n                  onChange={(e) => setEndDate(e.target.value)}\n                  required={type === \"수시모집\"}\n                />\n              </>\n            )}\n\n            <S.Label>모집 내용</S.Label>\n            <S.TextArea\n              placeholder=\"모집에 대한 상세 설명을 입력하세요. (엔터키를 사용해 줄바꿈 가능합니다.)\"\n              value={description}\n              onChange={(e) => setDescription(e.target.value)}\n              required\n            />\n            <S.SubmitButton type=\"submit\">게시</S.SubmitButton>\n          </S.Form>\n        </S.Main>\n      </S.Content>\n    </S.Container>\n  );\n}\n\nexport default RecruitmentPage;\n"],"names":["Container","styled","div","_templateObject","_taggedTemplateLiteral","Content","header","_templateObject2","_templateObject3","nav","_templateObject4","_templateObject5","_templateObject6","Main","_templateObject7","h3","_templateObject8","ul","_templateObject9","li","_templateObject10","props","$isSelected","main","_templateObject11","Title","h2","_templateObject12","Highlight","span","_templateObject13","Form","form","_templateObject14","Label","label","_templateObject15","Input","input","_templateObject16","TextArea","textarea","_templateObject17","Select","select","_templateObject18","SubmitButton","button","_templateObject19","ErrorMessage","p","_templateObject20","SuccessMessage","_templateObject21","_templateObject22","club_id","useParams","clubName","setClubName","useState","title","setTitle","type","setType","phoneNumber","setPhoneNumber","email","setEmail","startDate","setStartDate","endDate","setEndDate","description","setDescription","error","setError","success","setSuccess","API_URL","concat","useEffect","async","response","axios","get","headers","data","club_name","err","console","fetchClubName","_jsx","S","children","_jsxs","onSubmit","e","preventDefault","recruitmentStartDate","Date","toISOString","split","recruitmentEndDate","requestData","recruitment_title","recruitment_type","recruitment_phone_number","recruitment_email","recruitment_start_date","recruitment_end_date","recruitment_description","log","post","status","placeholder","value","onChange","target","required","_Fragment"],"sourceRoot":""}